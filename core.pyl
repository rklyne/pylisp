
(defmacro when [test, &body]
  (list 'if test (cons 'progn body)))

(defmacro repeatedly [n body]
  (list 'if (list '= n '0) '[]
    (list 'cons
      (list 'eval body)
      (list 'repeatedly (list '- n '1) body)
    )))


(defmacro defn [name bindings &body]
  (list 'def name
    (cons 'fn (cons bindings body))))

; builtin binding* only takes a single expr. "binding" will 'progn them.
(defmacro binding [bindings &exprs]
  (cons 'binding* (cons bindings (cons 'progn exprs))))

; Same for 'let*' and 'let'
(defmacro let [bindings &exprs]
  (cons 'let* (cons bindings (cons 'progn exprs))))


